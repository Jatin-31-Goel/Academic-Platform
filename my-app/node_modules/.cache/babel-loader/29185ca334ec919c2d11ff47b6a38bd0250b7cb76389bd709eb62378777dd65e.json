{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\OneDrive\\\\Attachments\\\\Desktop\\\\AcademicPlatform\\\\my-app\\\\src\\\\Components\\\\CommentsSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { TextField, Button, Typography, Box } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  uploadId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const [loading, setLoading] = useState(false); // Loading indicator\n\n  // Fetch existing comments for this upload\n  const fetchComments = useCallback(async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.get(`http://127.0.0.1:5000/uploads/${uploadId}/comments`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setComments(response.data.comments); // Assuming backend returns an array of comments\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [uploadId]);\n\n  // Add a new comment\n  const addComment = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(`http://127.0.0.1:5000/uploads/${uploadId}/comments`, {\n        text: newComment\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setComments([...comments, response.data.comment]); // Assuming backend returns the added comment\n      setNewComment(\"\");\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n      alert(\"Error adding comment. Please try again.\");\n    }\n  };\n\n  // Fetch comments on component mount\n  useEffect(() => {\n    fetchComments();\n  }, [fetchComments]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: [comment.author, \": \", comment.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(TextField, {\n      value: newComment,\n      onChange: e => setNewComment(e.target.value),\n      placeholder: \"Add a comment...\",\n      fullWidth: true,\n      margin: \"normal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: addComment,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentsSection, \"aOFBE5Z0tBL1+2Pu6JPiIMG0Drk=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","useEffect","axios","TextField","Button","Typography","Box","jsxDEV","_jsxDEV","CommentsSection","uploadId","_s","comments","setComments","newComment","setNewComment","loading","setLoading","fetchComments","useCallback","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","addComment","post","text","comment","alert","sx","mt","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","map","mb","author","id","value","onChange","e","target","placeholder","fullWidth","margin","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hp/OneDrive/Attachments/Desktop/AcademicPlatform/my-app/src/Components/CommentsSection.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TextField, Button, Typography, Box } from \"@mui/material\";\r\n\r\nconst CommentsSection = ({ uploadId }) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [loading, setLoading] = useState(false); // Loading indicator\r\n\r\n  // Fetch existing comments for this upload\r\n  const fetchComments = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.get(\r\n        `http://127.0.0.1:5000/uploads/${uploadId}/comments`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setComments(response.data.comments); // Assuming backend returns an array of comments\r\n    } catch (error) {\r\n      console.error(\"Error fetching comments:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [uploadId]);\r\n\r\n  // Add a new comment\r\n  const addComment = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await axios.post(\r\n        `http://127.0.0.1:5000/uploads/${uploadId}/comments`,\r\n        { text: newComment },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setComments([...comments, response.data.comment]); // Assuming backend returns the added comment\r\n      setNewComment(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error adding comment:\", error);\r\n      alert(\"Error adding comment. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Fetch comments on component mount\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [fetchComments]);\r\n\r\n  return (\r\n    <Box sx={{ mt: 2 }}>\r\n      <Typography variant=\"h6\">Comments</Typography>\r\n\r\n      {/* Render Comments */}\r\n      {loading ? (\r\n        <Typography>Loading...</Typography>\r\n      ) : (\r\n        comments.map((comment) => (\r\n          <Box key={comment.id} sx={{ mb: 1 }}>\r\n            <Typography>{comment.author}: {comment.text}</Typography>\r\n          </Box>\r\n        ))\r\n      )}\r\n\r\n      {/* Add Comment */}\r\n      <TextField\r\n        value={newComment}\r\n        onChange={(e) => setNewComment(e.target.value)}\r\n        placeholder=\"Add a comment...\"\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n      <Button variant=\"contained\" color=\"primary\" onClick={addComment}>\r\n        Submit\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CommentsSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}